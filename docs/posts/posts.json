[
  {
    "path": "posts/20210202_Clustering wine/",
    "title": "Clustering Analysis on Wine Dataset",
    "description": "A continuation from PCA analysis of wine dataset: k-means clustering and hierarchical clustering",
    "author": [
      {
        "name": "lruolin",
        "url": {}
      }
    ],
    "date": "2021-02-02",
    "categories": [],
    "contents": "\nSummary\nPCA is used as an exploratory data analysis tool, and may be used for feature engineering and/or clustering. This is a continuation of clustering analysis on the wines dataset in the kohonen package, in which I carry out k-means clustering using the tidymodels framework, as well as hierarchical clustering using factoextra pacage.\nWorkflow\nImport data\nExploratory data analysis\nskim\nggcorr\nggpairs\nCheck assumptions on whether PCA can be carried out\nKMO\nBartlett\nCarry out PCA using tidymodels workflow\nAlways use only continuous variables, ensure that there are no missing data. Determine the number of components using eigenvalues, scree plots and parallel analysis.\nrecipe : preprocess the data (missing values, center and scale, ensuring that variables are continuous)\nprep : evaluate the data\nbake : get the PCA Scores results\nvisualize\ncommunicate results: show the scree plot, PCA loadings, variance explained by each component, loadings and score plot.\nThe loading shows the linear combinations of the original variables - ie the new dimension.\nThe scores show the coordinates of the individual wine samples in the new low-dimensional space.\nUse the loadings to carry out k-means clustering and hierarchical clustering.\nLoading packages\n\n\nlibrary(pacman)\np_load(corrr, GGally, tidymodels, tidytext, tidyverse, psych,\n       skimr, gridExtra, kohonen, janitor, learntidymodels, kohonen,\n       cluster, factoextra)\n\n\n\nImport\nThis dataset is from the kohonen package. It contains 177 rows and 13 columns.\nThese data are the results of chemical analyses of wines grown in the same region in Italy (Piedmont) but derived from three different cultivars: Nebbiolo, Barberas and Grignolino grapes. The wine from the Nebbiolo grape is called Barolo. The data contain the quantities of several constituents found in each of the three types of wines, as well as some spectroscopic variables.\nPCA analysis was performed earlier, and k-means clustering and hierarchical clustering analysis (HCA) will be built upon the PCA loadings.\n\n\ndata(wines)\n\nwines <- as.data.frame(wines) %>% \n  janitor::clean_names() %>%  # require data.frame\n  as_tibble() \n \nglimpse(wines) # does not contain the types of wine (Y variable)\n\n\nRows: 177\nColumns: 13\n$ alcohol          <dbl> 13.20, 13.16, 14.37, 13.24, 14.20, 14.39, …\n$ malic_acid       <dbl> 1.78, 2.36, 1.95, 2.59, 1.76, 1.87, 2.15, …\n$ ash              <dbl> 2.14, 2.67, 2.50, 2.87, 2.45, 2.45, 2.61, …\n$ ash_alkalinity   <dbl> 11.2, 18.6, 16.8, 21.0, 15.2, 14.6, 17.6, …\n$ magnesium        <dbl> 100, 101, 113, 118, 112, 96, 121, 97, 98, …\n$ tot_phenols      <dbl> 2.65, 2.80, 3.85, 2.80, 3.27, 2.50, 2.60, …\n$ flavonoids       <dbl> 2.76, 3.24, 3.49, 2.69, 3.39, 2.52, 2.51, …\n$ non_flav_phenols <dbl> 0.26, 0.30, 0.24, 0.39, 0.34, 0.30, 0.31, …\n$ proanth          <dbl> 1.28, 2.81, 2.18, 1.82, 1.97, 1.98, 1.25, …\n$ col_int          <dbl> 4.38, 5.68, 7.80, 4.32, 6.75, 5.25, 5.05, …\n$ col_hue          <dbl> 1.05, 1.03, 0.86, 1.04, 1.05, 1.02, 1.06, …\n$ od_ratio         <dbl> 3.40, 3.17, 3.45, 2.93, 2.85, 3.58, 3.58, …\n$ proline          <dbl> 1050, 1185, 1480, 735, 1450, 1290, 1295, 1…\n\nEDA\nRefer to the post for PCA of wine analysis\nTidymodels (PCA)\nRecipe\nThe dataset did not include the y variable (type of wine), so the update_role() function will be omitted.\nstep_normalize() combines step_center() and step_scale()\nNote that step_pca is the second step –> will need to retrieve the PCA results from the second list later.\n\n\nwines_recipe <- recipe(~ ., data = wines) %>% \n  # update_role(vintages, new_role = \"id\") %>%  # skipped\n  # step_naomit(all_predictors()) %>% \n  step_normalize(all_predictors()) %>% \n  step_pca(all_predictors(), id = \"pca\")\n\nwines_recipe # 13 predictors\n\n\nData Recipe\n\nInputs:\n\n      role #variables\n predictor         13\n\nOperations:\n\nCentering and scaling for all_predictors()\nNo PCA components were extracted.\n\nPreparation\n\n\nwines_prep <- prep(wines_recipe)\n\nwines_prep # trained\n\n\nData Recipe\n\nInputs:\n\n      role #variables\n predictor         13\n\nTraining data contained 177 data points and no missing data.\n\nOperations:\n\nCentering and scaling for alcohol, malic_acid, ... [trained]\nPCA extraction with alcohol, malic_acid, ... [trained]\n\ntidy_pca_loadings <- wines_prep %>% \n  tidy(id = \"pca\")\n\ntidy_pca_loadings # values here are the loading\n\n\n# A tibble: 169 x 4\n   terms               value component id   \n   <chr>               <dbl> <chr>     <chr>\n 1 alcohol          -0.138   PC1       pca  \n 2 malic_acid        0.246   PC1       pca  \n 3 ash               0.00432 PC1       pca  \n 4 ash_alkalinity    0.237   PC1       pca  \n 5 magnesium        -0.135   PC1       pca  \n 6 tot_phenols      -0.396   PC1       pca  \n 7 flavonoids       -0.424   PC1       pca  \n 8 non_flav_phenols  0.299   PC1       pca  \n 9 proanth          -0.313   PC1       pca  \n10 col_int           0.0933  PC1       pca  \n# … with 159 more rows\n\nBake\n\n\nwines_bake <- bake(wines_prep, wines)\nwines_bake  # has the PCA SCORES to run HCA and k-means clustering\n\n\n# A tibble: 177 x 5\n     PC1    PC2    PC3      PC4     PC5\n   <dbl>  <dbl>  <dbl>    <dbl>   <dbl>\n 1 -2.22 -0.301 -2.03   0.281   -0.259 \n 2 -2.52  1.06   0.974 -0.734   -0.198 \n 3 -3.74  2.80  -0.180 -0.575   -0.257 \n 4 -1.02  0.886  2.02   0.432    0.274 \n 5 -3.04  2.16  -0.637  0.486   -0.630 \n 6 -2.45  1.20  -0.985  0.00466 -1.03  \n 7 -2.06  1.64   0.143  1.20     0.0105\n 8 -2.51  0.958 -1.78  -0.104   -0.871 \n 9 -2.76  0.822 -0.986 -0.374   -0.437 \n10 -3.48  1.35  -0.428 -0.0399  -0.316 \n# … with 167 more rows\n\nCheck number of PC\nOnly the scree plot is showed below. Refer to PCA analysis of wine for other options in determining number of PCs.\n\n\n# b. Scree plot/Variance plot\n\nwines_prep %>% \n  tidy(id = \"pca\", type = \"variance\") %>% \n  filter(terms ==  \"percent variance\") %>% \n  ggplot(aes(x = component, y = value)) +\n  geom_point(size = 2) +\n  geom_line(size = 1) +\n  scale_x_continuous(breaks = 1:13) +\n  labs(title = \"% Variance explained\",\n       y = \"% total variance\",\n       x = \"PC\",\n       caption = \"Source: Wines dataset from kohonen package\") +\n  theme_classic() +\n  theme(axis.title = element_text(face = \"bold\", size = 12),\n        axis.text = element_text(size = 10),\n        plot.title = element_text(size = 14, face = \"bold\"))  # 2 or 3\n\n\n\n\nVisualize\nLoadings plot\n\n\nplot_loadings <- tidy_pca_loadings %>% \n  filter(component %in% c(\"PC1\", \"PC2\", \"PC3\")) %>% \n  mutate(terms = tidytext::reorder_within(terms, \n                                          abs(value), \n                                          component)) %>% \n  ggplot(aes(abs(value), terms, fill = value>0)) +\n  geom_col() +\n  facet_wrap( ~component, scales = \"free_y\") +\n  scale_y_reordered() + # appends ___ and then the facet at the end of each string\n  scale_fill_manual(values = c(\"deepskyblue4\", \"darkorange\")) +\n  labs( x = \"absolute value of contribution\",\n        y = NULL,\n        fill = \"Positive?\",\n        title = \"PCA Loadings Plot\",\n        subtitle = \"Number of PC should be 3, compare the pos and the neg\",\n        caption = \"Source: ChemometricswithR\") +\n  theme_minimal() +\n  theme(title = element_text(size = 24, face = \"bold\"),\n        axis.text = element_text(size = 16),\n        axis.title = element_text(size = 20))\n\n\nplot_loadings\n\n\n\n# PC1: flavonoids, tot_phenols, od_ratio, proanthocyanidins, col_hue, 36%\n# PC2: col_int, alcohol, proline, ash, magnesium; 19.2%\n# PC3: ash, ash_alkalinity, non_flav phenols; 11.2%\n\n\n\nLoadings only\n\n\n# define arrow style\narrow_style <- arrow(angle = 30,\n                     length = unit(0.2, \"inches\"),\n                     type = \"closed\")\n\n# get pca loadings into wider format\npca_loadings_wider <- tidy_pca_loadings%>% \n  pivot_wider(names_from = component, id_cols = terms)\n\n\npca_loadings_only <- pca_loadings_wider %>% \n  ggplot(aes(x = PC1, y = PC2)) +\n  geom_segment(aes(xend = PC1, yend = PC2),\n               x = 0, \n               y = 0,\n               arrow = arrow_style) +\n  ggrepel::geom_text_repel(aes(x = PC1, y = PC2, label = terms),\n            hjust = 0, \n            vjust = 1,\n            size = 5,\n            color = \"red\") +\n  labs(title = \"Loadings on PCs 1 and 2 for normalized data\") +\n  theme_classic()\n\n\n\nScores plot\n\n\n# Scores plot #####\n# PCA SCORES are in bake\npc1pc2_scores_plot <- wines_bake %>% \n  ggplot(aes(PC1, PC2)) +\n  geom_point(aes(color = vintages, shape = vintages), \n             alpha = 0.8, size = 2) +\n  scale_color_manual(values = c(\"deepskyblue4\", \"darkorange\", \"purple\")) +\n  labs(title = \"Scores on PCs 1 and 2 for normalized data\",\n       x = \"PC1 (36%)\",\n       y = \"PC2 (19.2%)\") +\n  theme_classic() +\n  theme(legend.position = \"none\") \n\n\n\nFinalised plots\n\n\ngrid.arrange(pc1pc2_scores_plot, pca_loadings_only, ncol = 2)\n\n\n\n\nk-means clustering\nThe PCA scores will be used for clustering analysis\n\n\nwines_bake\n\n\n# A tibble: 177 x 5\n     PC1    PC2    PC3      PC4     PC5\n   <dbl>  <dbl>  <dbl>    <dbl>   <dbl>\n 1 -2.22 -0.301 -2.03   0.281   -0.259 \n 2 -2.52  1.06   0.974 -0.734   -0.198 \n 3 -3.74  2.80  -0.180 -0.575   -0.257 \n 4 -1.02  0.886  2.02   0.432    0.274 \n 5 -3.04  2.16  -0.637  0.486   -0.630 \n 6 -2.45  1.20  -0.985  0.00466 -1.03  \n 7 -2.06  1.64   0.143  1.20     0.0105\n 8 -2.51  0.958 -1.78  -0.104   -0.871 \n 9 -2.76  0.822 -0.986 -0.374   -0.437 \n10 -3.48  1.35  -0.428 -0.0399  -0.316 \n# … with 167 more rows\n\nNumber of clusters?\nThere are 3 common ways for determining the number of clusters:\ngap statistic method\nwithin sum of square method\nsilhouette method\nLet us look at all three of them.\nGap Statistic Method\n\n\ngap_statistic <- cluster::clusGap(wines_bake,\n                                  FUN = kmeans,\n                                  nstart = 50, \n                                  K.max = 10, # max number of clusters\n                                  B = 1000) # bootstrap\n\nfactoextra::fviz_gap_stat(gap_statistic) # theoretically should have only 3 clusters\n\n\n\n\nWithin Sum of Square Method\n\n\nfviz_nbclust(wines_bake,\n             kmeans,\n             method = \"wss\") # this suggests 3 clusters, in line with theory\n\n\n\n\nSilhouette Method\n\n\nfviz_nbclust(wines_bake,\n             FUN = hcut,\n             method = \"silhouette\") # this suggests 3 clusters\n\n\n\n\nAll three methods agree that there should be 3 clusters. This may not always be the case. In any case, we know that there are 3 different types of wine in the dataset.\nTidymodels workflow for k-means clustering\n\n\n# exploring different k numbers #####\nkclusts_explore <- tibble(k = 1:10) %>% \n  mutate(kclust = purrr::map(k, ~kmeans(wines_bake, .x)),\n         tidied = purrr::map(kclust, tidy),\n         glanced = purrr::map(kclust, glance),\n         augmented = purrr::map(kclust, augment, wines_bake))\n\nkclusts_explore\n\n\n# A tibble: 10 x 5\n       k kclust   tidied            glanced          augmented        \n   <int> <list>   <list>            <list>           <list>           \n 1     1 <kmeans> <tibble [1 × 8]>  <tibble [1 × 4]> <tibble [177 × 6…\n 2     2 <kmeans> <tibble [2 × 8]>  <tibble [1 × 4]> <tibble [177 × 6…\n 3     3 <kmeans> <tibble [3 × 8]>  <tibble [1 × 4]> <tibble [177 × 6…\n 4     4 <kmeans> <tibble [4 × 8]>  <tibble [1 × 4]> <tibble [177 × 6…\n 5     5 <kmeans> <tibble [5 × 8]>  <tibble [1 × 4]> <tibble [177 × 6…\n 6     6 <kmeans> <tibble [6 × 8]>  <tibble [1 × 4]> <tibble [177 × 6…\n 7     7 <kmeans> <tibble [7 × 8]>  <tibble [1 × 4]> <tibble [177 × 6…\n 8     8 <kmeans> <tibble [8 × 8]>  <tibble [1 × 4]> <tibble [177 × 6…\n 9     9 <kmeans> <tibble [9 × 8]>  <tibble [1 × 4]> <tibble [177 × 6…\n10    10 <kmeans> <tibble [10 × 8]> <tibble [1 × 4]> <tibble [177 × 6…\n\n# turn this into 3 separate datasets, each representing a\n# different type of data\n\n#\nclusters <- kclusts_explore %>% \n  unnest(cols = c(tidied))\n\nclusters\n\n\n# A tibble: 55 x 12\n       k kclust       PC1       PC2       PC3       PC4       PC5\n   <int> <list>     <dbl>     <dbl>     <dbl>     <dbl>     <dbl>\n 1     1 <kmea… -1.03e-15 -2.78e-16 -3.22e-16 -5.39e-17  1.76e-16\n 2     2 <kmea…  1.91e+ 0 -8.65e- 2 -1.73e- 3  7.28e- 2 -1.41e- 2\n 3     2 <kmea… -1.89e+ 0  8.56e- 2  1.71e- 3 -7.20e- 2  1.39e- 2\n 4     3 <kmea…  2.71e+ 0  1.10e+ 0 -2.35e- 1 -6.17e- 2  7.64e- 2\n 5     3 <kmea…  4.43e- 4 -1.76e+ 0  1.85e- 1 -7.36e- 2  7.54e- 2\n 6     3 <kmea… -2.26e+ 0  9.55e- 1 -5.83e- 4  1.30e- 1 -1.44e- 1\n 7     4 <kmea…  2.90e- 1 -1.77e+ 0 -8.54e- 1  4.55e- 1  1.35e- 1\n 8     4 <kmea…  2.76e+ 0  1.21e+ 0 -1.52e- 1 -1.11e- 1  5.10e- 2\n 9     4 <kmea… -2.39e+ 0  1.04e+ 0 -2.57e- 1  1.29e- 1 -2.19e- 1\n10     4 <kmea… -3.41e- 1 -1.30e+ 0  1.28e+ 0 -4.39e- 1  1.17e- 1\n# … with 45 more rows, and 5 more variables: size <int>,\n#   withinss <dbl>, cluster <fct>, glanced <list>, augmented <list>\n\n#\nassignments <- kclusts_explore %>% \n  unnest(cols = c(augmented))\n\nassignments  # can be used to plot, with each point colored according to predicted cluster\n\n\n# A tibble: 1,770 x 10\n       k kclust tidied glanced   PC1    PC2    PC3      PC4     PC5\n   <int> <list> <list> <list>  <dbl>  <dbl>  <dbl>    <dbl>   <dbl>\n 1     1 <kmea… <tibb… <tibbl… -2.22 -0.301 -2.03   0.281   -0.259 \n 2     1 <kmea… <tibb… <tibbl… -2.52  1.06   0.974 -0.734   -0.198 \n 3     1 <kmea… <tibb… <tibbl… -3.74  2.80  -0.180 -0.575   -0.257 \n 4     1 <kmea… <tibb… <tibbl… -1.02  0.886  2.02   0.432    0.274 \n 5     1 <kmea… <tibb… <tibbl… -3.04  2.16  -0.637  0.486   -0.630 \n 6     1 <kmea… <tibb… <tibbl… -2.45  1.20  -0.985  0.00466 -1.03  \n 7     1 <kmea… <tibb… <tibbl… -2.06  1.64   0.143  1.20     0.0105\n 8     1 <kmea… <tibb… <tibbl… -2.51  0.958 -1.78  -0.104   -0.871 \n 9     1 <kmea… <tibb… <tibbl… -2.76  0.822 -0.986 -0.374   -0.437 \n10     1 <kmea… <tibb… <tibbl… -3.48  1.35  -0.428 -0.0399  -0.316 \n# … with 1,760 more rows, and 1 more variable: .cluster <fct>\n\n#\nclusterings <- kclusts_explore %>% \n  unnest(cols = c(glanced))\n\nclusterings\n\n\n# A tibble: 10 x 8\n       k kclust  tidied  totss tot.withinss betweenss  iter augmented \n   <int> <list>  <list>  <dbl>        <dbl>     <dbl> <int> <list>    \n 1     1 <kmean… <tibbl… 1834.        1834. -2.50e-12     1 <tibble […\n 2     2 <kmean… <tibbl… 1834.        1192.  6.42e+ 2     1 <tibble […\n 3     3 <kmean… <tibbl… 1834.         820.  1.01e+ 3     2 <tibble […\n 4     4 <kmean… <tibbl… 1834.         730.  1.10e+ 3     3 <tibble […\n 5     5 <kmean… <tibbl… 1834.         659.  1.18e+ 3     3 <tibble […\n 6     6 <kmean… <tibbl… 1834.         603.  1.23e+ 3     4 <tibble […\n 7     7 <kmean… <tibbl… 1834.         562.  1.27e+ 3     3 <tibble […\n 8     8 <kmean… <tibbl… 1834.         545.  1.29e+ 3     5 <tibble […\n 9     9 <kmean… <tibbl… 1834.         471.  1.36e+ 3     3 <tibble […\n10    10 <kmean… <tibbl… 1834.         465.  1.37e+ 3     4 <tibble […\n\n#  visualize\n\n# number of clusters\nclusterings %>% # from glance\n  ggplot(aes(k, tot.withinss)) + # total within cluster sum of squares, keep low\n  geom_line() +\n  geom_point() +\n  scale_x_continuous(breaks = 1:10) +\n  labs(title = \"Plot of Total Within Sum of Squares for different number of clusters\",\n       subtitle = \"Additional clusters beyond k = 3 have little value\") +\n  theme_classic()\n\n\n\n# how datapoints are separated\nglimpse(assignments)\n\n\nRows: 1,770\nColumns: 10\n$ k        <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ kclust   <list> [<1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ tidied   <list> [<tbl_df[1 x 8]>, <tbl_df[1 x 8]>, <tbl_df[1 x 8]…\n$ glanced  <list> [<tbl_df[1 x 4]>, <tbl_df[1 x 4]>, <tbl_df[1 x 4]…\n$ PC1      <dbl> -2.223934, -2.524760, -3.744056, -1.017245, -3.040…\n$ PC2      <dbl> -0.30145757, 1.05925179, 2.79737289, 0.88586726, 2…\n$ PC3      <dbl> -2.0271695, 0.9739613, -0.1798599, 2.0181445, -0.6…\n$ PC4      <dbl> 0.281108579, -0.733645703, -0.575492236, 0.4315681…\n$ PC5      <dbl> -0.25880549, -0.19804048, -0.25714173, 0.27445613,…\n$ .cluster <fct> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n\nassignments %>% # from augment\n  ggplot(aes(x = PC1, y = PC2)) + # use PCA data\n  geom_point(aes(color = .cluster), size = 2, alpha = 0.8) +\n  facet_wrap( ~ k) +\n  # to see the center of the clusters\n  geom_point(data = clusters, size = 9, shape  = \"x\") +\n  labs(x = \"PC1 (36% variance)\",\n       y = \"PC2 (19.2% variance\",\n       title = \"Visualization of k-means clustering\",\n       subtitle = \"Optimal k = 3\",\n       caption = \"Source: Wines dataset from kohonen package\") +\n  theme_minimal()\n\n\n\n\nHierarchical Clustering Analysis\n\n\nwines_HC <- wines_bake %>% \n    dist(.,method = \"euclidean\") %>% \n    hclust(., method = \"ward.D2\")\n\n# 3 clusters:\nfviz_dend(wines_HC,\n          k = 3,\n          rect = T,\n          rect_border = \"jco\",\n          rect_fill = T)\n\n\n\n\nLearning pointers:\nInitially, I was stuck at the visualization part for k-means clustering as I didn’t know how to bring in my x and y-axis data. I had been using the original dataset all along, and was wondering why plots created using the factoextra::fviz_cluster() could report Dim 1 for x axis and Dim 2 for y axis. I finally had the eureka moment when I realised I should use the PCA scores from the bake step earlier.\nI really like the tidymodels way of allowing for visualizing how the clusters are separated when different values of k are used. The functions augment, tidy and glance were very efficient in reporting the results for k-means clustering. Previously I only used tidy and glance for regression, and I didn’t know they could be extended to cluster analysis as well.\nLastly, I find dendrograms very aesthetically intuitive and I like how the colors and types of dendrograms could be customised. However, the assumption is that there must be some structure in the data in the first place, otherwise HCA would give very misleading results.\nReferences\nhttps://rdrr.io/github/tidymodels/learntidymodels/f/inst/tutorials/pca_recipes/pca_recipes.Rmd\nhttps://allisonhorst.github.io/palmerpenguins/articles/articles/pca.html\nhttps://www.ibm.com/support/knowledgecenter/en/SSLVMB_subs/statistics_casestudies_project_ddita/spss/tutorials/fac_telco_kmo_01.html\nhttps://www.tidymodels.org/learn/statistics/k-means/\nhttps://www.r-bloggers.com/2019/07/use-the-k-means-clustering-luke/\nhttps://statsandr.com/blog/clustering-analysis-k-means-and-hierarchical-clustering-by-hand-and-in-r/\nhttps://agroninfotech.blogspot.com/2020/06/visualizing-clusters-in-r-hierarchical.html\n\n\n\n",
    "preview": "posts/20210202_Clustering wine/Clustering-wine_files/figure-html5/unnamed-chunk-6-1.png",
    "last_modified": "2021-02-03T00:24:11+08:00",
    "input_file": {}
  },
  {
    "path": "posts/20210130_Volatiles_tomato/",
    "title": "Volatile Compounds in Tomato and Tomato Products",
    "description": "Scraping information from journal article",
    "author": [
      {
        "name": "lruolin",
        "url": {}
      }
    ],
    "date": "2021-02-01",
    "categories": [],
    "contents": "\nOverview of tomato volatiles\nTomato flavor is the result of interaction of aroma and taste, arising from the interplay of mixture of acids, sugars, amino acids, minerals and volatile compounds. Presence of sugar or organic acids alters taste panel perception of aroma descriptions of samples with the same concentration of volatile compounds.\nVolatile compounds may originate from different biosynthesis pathways (Buttery, Teranishi, and Ling 1987), (Baldwin et al. 1998), (Yilmaz 2001):\nDerived from amino acids: Amino acids are acted upon by transaminase enzymes and converted into alpha-keto acids; which then undergo decarboxylation to form aldehydes, which may be reduced to form ketones.\nDerived from carotenoids: eg 6-methyl-5-hepten-2-one and geranial\nDerived from lipid degradation by lipoxygenase: eg C6 volatiles\nDerived from peroxide lyase and alcohol dehydrogenase enzymes (ADH catalysed alcohol formation from aldehydes)\nMaillard reaction products: furans, pyrroles (Strecker degradation products), pyrazines. These are usually seen in thermally processed tomato products/flavors\nDerived from action of endogenous glycosidases (eg guaiacol, eugenol, methyl salicylate)\nThe amount and types of volatiles are also influenced by:\nTissue disruption\nRipening of fruit\nCultivar\nProcessing/Heating\nAddition of other ingredients (eg herbs and spices for pasta sauces)\nAim of this exercise:\nThe aim of this exercise was to scrape the table of approximately 400 compounds from the pdf, and to visualize them by chemical categories.\nThere is a very handy package, tabulizer, which allows for scraping of information from pdf articles. I tried out text scraping, and text cleaning, from the article (Petro‐Turza 1986)\nWorkflow\nImport data using tabulizer\nText cleaning using stringr package\nVisualize using ggplot2\nLoading packages\n\n\nlibrary(rJava)\nlibrary(tabulizer)\nlibrary(tidyverse)\nlibrary(stringr)\nlibrary(stringi)\n\n\n\nImport & Tidy\nI am interested in scraping the table of approximately 400 volatiles from page 18 to page 28. A copy of the pdf is saved in my working directory. I used the locate_area() function to determine the coordinates for scraping, and then extracted the text using extract_text() function.\n\n\nfile <- \"1986-tomato volatiles.pdf\"\n# locate_areas(file)\n\np18 <- extract_text(file, pages = 18, area = list(c(115.5, 33.05, 641.923, 443.94)))\n\np19 <- extract_text(file, pages = 19, \n                    area = list(c(117.15636,  53.20364, 651.60000, 465.22545 )))\n\np20 <- extract_text(file, pages = 20, \n                    area = list(c(114.52364,  38.72364, 650.28364, 449.42909 )))\n\np21 <- extract_text(file, pages = 21, \n                    area = list(c(119.29273 , 48.89727, 656.76545, 457.90091 )))\n\np22 <- extract_text(file, pages = 22, \n                    area = list(c(113.20727,  30.32545, 643.70182, 466.04182)))\n\np23 <- extract_text(file, pages = 23, \n                    area = list(c(122.25273,  49.84636, 652.01455, 473.13000 )))\n\np24 <- extract_text(file, pages = 24, \n                    area = list(c(113.,  34, 645.01818, 430.50000 )))\n\np25 <- extract_text(file, pages = 25, \n                    area = list(c(119,  58 ,642.81273, 478.38818)))\n\np26 <- extract_text(file, pages = 26, \n                    area = list(c(114,  35, 668.17818, 443.44000)))\n\np27 <- extract_text(file, pages = 27, \n                    area = list(c(114.20727,  41.24545, 656.36364, 442.94000)))\n\np28 <- extract_text(file, pages = 28, \n                    area = list(c(115.52000,  33.86909, 404.32000, 469.69455 )))\n\ncombined <- tribble(~page, ~text,\n                    \"p18\", p18,\n                    \"p19\", p19,\n                    \"p20\", p20,\n                    \"p20\", p20,\n                    \"p21\", p21,\n                    \"p22\", p22,\n                    \"p23\", p23,\n                    \"p24\", p24,\n                    \"p25\", p25,\n                    \"p26\", p26,\n                    \"p27\", p27,\n                    \"p28\", p28) %>% \n  dplyr::mutate(text_2 = gsub(\"\\\\n\", \"; \", text),\n         text_3 = str_split(text_2, \"; \")) %>% # split by ; into new columns\n  unnest() \n\n\n\nI combined all the text that was extracted into a tibble. Then I replaced all the “” with “;” and then used str_split() to split the compounds into individual rows.\nFollowing which, I used a series to str_replace_all to clean up the text. The list of things to remove include:\ndigits that followed after chemical names\nseries of commars\ntext that mentioned unknown structure\nalternative synonoyms of chemical compounds that were located within square brackets\nodd chemical names\nAs I replaced the commars, some of the chemical names were also changed. For example, 2,6-dimethylpyrazine became 26-dimethylpyrazine. I had to change the names by looking for numbers 26, and replacing them as 2,6.\nI visually scanned through the list again and made changes where necessary, for eg, 2-formylpyiTole is actually 2-formylpyrrole.\n\n\ncleaned_text <- combined %>% \n  dplyr::select(text_3) # 521\n\n\ncleaned_text_b <- cleaned_text %>% \n  filter(!text_3 %in% c(\"(Continued)\", \"\")) %>%  # 503\n  filter(!is.na(text_3)) %>% \n  mutate(text_4 = str_replace_all(text_3, \"[0-9]{2,3}\", \"\"),\n         text_4 = str_replace_all(text_4, \"\\\\ , \", \"\"),\n         text_4 = str_replace_all(text_4, \"\\\\,,+\", \"\"),\n         text_4 = str_replace_all(text_4, \"\\\\(unknown structure\\\\)\", \"\"),\n         text_4 = str_replace_all(text_4, \"\\\\[[^\\\\]\\\\[]*]\", \"\"),\n         text_4 = str_replace_all(text_4, \"\\\\[[^\\\\[]*\", \"\"),\n         text_4 = str_replace_all(text_4, \" \\\\,\", \"\"),\n         text_4 = str_replace_all(text_4, \" \\\\/\", \"\"),\n         # replace last commar, dash\n         text_4 = stri_replace_last(text_4, fixed = \",\", \"\"),\n         text_4 = str_replace_all(text_4, \"PJ-dimethyl-ö-octen-l-ol]\", \"\"),\n         text_4 = str_replace_all(text_4, \"/\", \"\"),\n         \n         # correct for commar replacement\n         text_4 = str_replace_all(text_4, \"45\", \"4,5\"),\n         text_4 = str_replace_all(text_4, \"26\", \"2,6\"),\n         text_4 = str_replace_all(text_4, \"25\", \"2,5\"),\n         text_4 = str_replace_all(text_4, \"33\", \"3,3\"),\n         text_4 = str_replace_all(text_4, \"23\", \"2,3\"),\n         text_4 = str_replace_all(text_4, \"14\", \"1,4\"),\n         text_4 = str_replace_all(text_4, \"12\", \"1,2\"),\n         text_4 = str_replace_all(text_4, \"24\", \"2,4\"),\n         text_4 = str_replace_all(text_4, \"34\", \"3,4\"),\n         text_4 = str_replace_all(text_4, \"11\", \"1,1\"),\n         text_4 = str_replace_all(text_4, \"2E 4Z\", \"2E,4Z\"),\n         text_4 = str_replace_all(text_4, \"2E4E\", \"2E,4E\"),\n         text_4 = str_replace_all(text_4, \"2E4Z\", \"2E,4Z\"),\n         text_4 = str_replace_all(text_4, \"hy droxy\", \"hydroxy\"),\n         text_4 = str_replace_all(text_4, \"66\", \"6,6\"),\n         text_4 = str_replace_all(text_4, \"3E5E\", \"3E,5E\"),\n         \n         # further clean up\n         text_4 = str_replace_all(text_4, \"\\\\(unknownstructure\\\\)\", \"\"),\n         text_4 = str_replace_all(text_4, \"\\\\(unknown\", \"\"),\n         text_4 = str_replace_all(text_4, \"2-formylpyiTole \", \"2-formylpyrrole\"),\n         text_4 = str_replace_all(text_4, \"neraUcis-SJ-dimethyl\\\\^.o-octadienal]\", \n                                  \"neral\"),\n         text_4 = str_replace_all(text_4, \"2-methyl-l-propanol -\", \n                                  \"2-methyl-l-propanol\"),\n         text_4 = str_replace_all(text_4, \"propanal 9 09 39 49 5\",\n                                  \"propanal\"),\n         text_4 = str_replace_all(text_4, \"\\\\(methylthioH-propanol\",\n                                  \"\\\\(methylthio)-propanol\"),\n         text_4 = str_replace_all(text_4, \"\\\\(2,2,6-trimethyl-7-oxabicyclo\",\n                                  \"\"),\n         text_4 = str_replace_all(text_4, \"._.\", \"\"),\n         \n         # remove white space\n         text_4 = str_replace_all(text_4, \" \\\\s\", \"\"),\n         \n         # remove quotation marks\n         text_4 = str_remove_all(text_4, \"\\\"\")) \n\n\n\nOne final clean:\n\n\ntomato_cleaned <- cleaned_text_b$text_4 %>% \n  as.data.frame() %>% \n  unique()\n\nnames(tomato_cleaned) <- c(\"compounds\")\n\ntomato_cleaned <- print(tomato_cleaned, quote = FALSE) %>% \n  filter(!compounds == \" \",\n         !compounds == \"\") # remove quotation marks \n\n\n                                                 compounds\n1                                             HYDROCARBONS\n2                                                 heptane \n3                                                  octane \n4                                                  nonane \n5                                                  decane \n6                                                 undecane\n7                                             pentadecane \n8                                                ethylene \n9                                                camphene \n10                                                3-carene\n11                                               limonene \n12                                                myrcene \n13                                          a-phellandrene\n14                                          ß-phellandrene\n15                                               o-pinene \n16                                                3-pinene\n17                                               sabinene \n18                                            terpinolene \n19                                          triisobutylene\n20                                                benzene \n21                                                 toluene\n22                                            ethylbenzene\n23                                                 styrene\n24                                          propylbenzene \n25                                                  cumene\n26                                           butylbenzene \n27                                                o-xylene\n28                                               m-xylene \n29                                                p-xylene\n30                                 l-ethyl-4-methylbenzene\n31                                         diethylbenzene \n32                                                  cymene\n33                                               p-cymene \n34                                       trimethylbenzene \n35                                           hemimellitene\n36                                            pseudocumene\n37                                              mesitylene\n38                                                biphenyl\n39                                             naphtalene \n40                                                ALCOHOLS\n41                                               methanol \n42                                                 ethanol\n43                                                        \n44                                             1-propanol \n46                                              2-propanol\n47                                     2-methyl-l-propanol\n48                                                        \n49                                    2-methyl-2-propanol \n50                                           2-propen-l-ol\n51                                               1-butanol\n53                                              2-butanol \n54                                              buten-1-ol\n55                                     2-methyl-l-butanol \n56                                      3-methyl-l-butanol\n58                                   3-methyl-2-buten-l-ol\n59                                  2-methyl-3-buten-2-ol \n60                                         2,3-butanediol \n61                                             1-pentanol \n63                                             2-pentanol \n64                                             3-pentanol \n65                                      cis-3-penten-l-ol \n66                                          l-penten-3-ol \n67                                    2-methyl-l-pentanol \n68                                    3-methyl-l-pentanol \n69                                     2-methyl-2-pentanol\n70                                               1-hexanol\n72                                              2-hexanol \n73                                                 hexenol\n74                                            2-hexen-l-ol\n75                                        cis-2-hexen-l-ol\n76                                     trans-2-hexen-l-ol \n77                                           3-hexen-l-ol \n78                                       cis-3-hexen-l-ol \n80                                     trans-3-hexen-1 -ol\n81                                       cis-4-hexen-l-ol \n82                                           methylhexanol\n83                                     2-methyl-3-hexanol \n84                                    5-methyl-1 -hexanol \n85                                             1-heptanol \n86                                              2-heptanol\n87                                              4-heptanol\n88                                 6-methyl-5-hepten-2-ol \n89                                               1-octanol\n91                                           l-octen-3-ol \n92                                     7-methyl-l-octanol \n93                                              1-decanol \n94                                            8-p-cymenol \n95                                             citronellol\n96                                                farnesol\n97                                               geraniol \n98                                                linalool\n100                                                 nerol \n101                                              nerolidol\n102                                          terpinen-4-ol\n103                                            o-terpineol\n104                                        benzyl alcohol \n105                                        2-phenylethanol\n107                              4-isopropylbenzyl alcohol\n108                                               menthol \n109                                                PHENOLS\n110                                                phenol \n111                                              o-cresol \n112                                               p-cresol\n113                                          4-ethylphenol\n114                                         4-vinylphenol \n115                                               guaiacol\n116                                4-ethyl-2-methoxyphenol\n117                                2-methoxy-4-vinylphenol\n118                                                eugenol\n119                                           3,4-xylenol \n120                                                 ETHERS\n121                                          diethyl ether\n122                                   1,1-dipropoxyethane \n123                    1-ethoxy-l (3-methylbutoxy)-ethane \n124                              1-ethoxy-l-pentoxyethane \n125                             l-methoxy-4-methylbenzene \n126                              isopropyl-methoxybenzene \n127                                    2-methoxy-biphenyl \n128                                              ALDEHYDES\n129                                           formaldehyde\n130                                           acetaldehyde\n175                                              propanal \n176                                               acrolein\n177                                       2-methylpropanal\n178                                                butanal\n179                                              2-butenal\n180                                       2-methylbutanal \n181                                       3-methylbutanal \n183                                    2-methyl-2-butenal \n184                                          tiglaldehyde \n185                                               pentanal\n186                                            2-pentenal \n187                                       trans-2-pentenal\n188                                             3-pentenal\n189                                         methylpentenal\n190                                                hexanal\n192                                               hexenal \n193                                              2-hexenal\n194                                          cis-2-hexenal\n195                                        trans-2-hexenal\n197                                         cis-3-hexenal \n198                                      2E,4Z-hexadienal \n199                                      2E,4E-hexadienal \n200                                               heptanal\n201                                              heptenal \n202                                             2-heptenal\n203                                       trans-2-heptenal\n204                                      2E,4Z-heptadienal\n205                                     2E,4E-heptadienal \n206                                               octanal \n207                                             2-octenal \n208                                       trans-2-octenal \n209                                               nonanal \n210                                              2-nonenal\n211                                        trans-2-nonenal\n212                                      2E,4E-nonadienal \n213                                               decanal \n214                                             2-decenal \n215                                        2,4-decadienal \n216                                       2E,4Z-decadienal\n217                                      2E,4E-decadienal \n218                                             undecanal \n219                                              dodecanal\n221                                                citral \n222                                                 neral \n223                                              geranial \n224                                           citronellal \n225                                               farnesal\n226                                          benzaldehyde \n228                                  3-methylbenzaldehyde \n229                                  4-methylbenzaldehyde \n230                                        salicylaldehyde\n231                                  4-hydroxybenzaldehyde\n232                                 3-methoxybenzaldehyde \n233                                          anisaldehyde \n234                                  2-phenylacetaldehyde \n235                                      3-phenylpropanal \n236                                         cinnamaldehyde\n237                                                KETONES\n238                                                acetone\n239                                            2-butanone \n240                                  3-hydroxy-2-butanone \n241                                          3-buten-2-one\n242                                            2-pentanone\n243                                           3-pentanone \n244                                         l-penten-3-one\n245                                         3-penten-2-one\n246                                         cyclopentanone\n247                                 2-ethylcyclopentanone \n248                                  2-methyl-3-pentanone \n249                                          mesityl oxide\n250                       4-hydroxy- 4-methyl-2-pentanone \n251                              2,4-dimethylpentan-3-one \n252                                            2-hexanone \n253                2-hydroxy-2,6,6-trimethylcyclohexanone \n254                                           2-heptanone \n255                                  4-methyl-3-heptanone \n256                                        methylheptenone\n257                               6-methyl-5-hepten-2-one \n259                           6-methyl-35-heptadien-2-one \n260                                             2-octanone\n261                                   3E,5E-octadien-2-one\n262                                            2-nonanone \n263                                   trans-2-nonen-4-one \n265                                             undecanone\n266                                          2-dodecanone \n267                                         pseudo-ionone \n268                                        geranylacetone \n270                                       farnesylacetone \n272                                              tt-ionone\n273                                               ß-ionone\n275                                              •y-ionone\n276                                         epoxy-0-ionone\n278                                                carvone\n279                                          acetophenone \n280                                  4-methylacetophenone \n281                                 2-hydroxyacetophenone \n282                                  4-methoxyacetophenone\n283                         4-methyl-4-phenyl-2-pentanone \n284                                   l-phenyl-2-propanone\n285                                    l-phenyl-2-butanone\n286                                   DICARBONYL COMPOUNDS\n287                                               glyoxal \n288                                          methylglyoxal\n289                                              biacetyl \n291                                       2-oxo-3-butenal \n292                                       2,3-pentanedione\n293                                      2,3-heptanedione \n294                                                  ACIDS\n295                                                formic \n296                                                 acetic\n297                                             propanoic \n298                                     2-methylpropanoic \n299                                              butanoic \n300                                      2-methylbutanoic \n301                                      3-methylbutanoic \n302                                              pentanoic\n303                                     4-methylpentanoic \n304                                              hexanoic \n305                                             4-hexenoic\n306                                             heptanoic \n308                                              octanoic \n309                                                geranic\n310                                               nonanoic\n311                                               myristic\n312                                         pentadecanoic \n313                                               palmitic\n314                                               stearic \n315                                                 oleic \n316                                               linoleic\n317                                             linolenic \n318                                               benzoic \n319                                              salicylic\n320                                        2-phenylacetic \n321                                              cinnamic \n322                                     4-hydroxycinnamic \n323                                                 ESTERS\n324                                        methyl fonnate \n325                                         ethyl fonnate \n326                                        pentyl fonnate \n327                                      phenetyl fonnate \n328                                        methyl acetate \n329                                         ethyl acetate \n330                                        propyl acetate \n331                                          butyl acetate\n332                                 2-methylbutyl acetate \n333                                     isopentyl acetate \n334                                         pentyl acetate\n335                                         hexyl acetate \n336                               trans-2-hexenyl acetate \n337                                     3-hexenyl acetate \n338                                  cis-3-hexenyl acetate\n339                              trans-3-hexeny 1 acetate2\n340                                        heptyl acetate \n341                               6 -methylheptyl acetate \n342                                         nonyl acetate \n343                                      phenethyl acetate\n344                                    citronellyl acetate\n345                                       geranyl acetate \n346                                        linalyl acetate\n347                                       ethyl propanoate\n348                                  isopentyl propanoate \n349                                 citronellyl propanoate\n350                                      methyl butanoate \n352                                     2-butyl butanoate \n353                                   isopentyl butanoate \n354                                 citronellyl butanoate \n355                                     geranyl butanoate \n356                            isobutyl 3-methylbutanoate \n357                       2-methylbutyl 3-methylbutanoate \n358                           isopentyl 3-methylbutanoate \n359                                   isobutyl pentanoate \n360                                   isopentyl pentanoate\n361                                      methyl hexanoate \n362                                        ethyl hexanoate\n363                                        butyl hexanoate\n364                                   isopentyl hexanoate \n365                                        hexyl hexanoate\n366                                  isopentyl heptanoate \n367                                       methyl octanoate\n368                                      propyl nonanoate \n369                                   isopentyl nonanoate \n370                                      propyl decanoate \n371                                   isopentyl decanoate \n372                                       methyl myristate\n373                                        ethyl myristate\n374                                  methyl pentadecanoate\n375                                      methyl palmitate \n376                                        ethyl palmitate\n377                                          methyl oléate\n378                                      methyl linoleate \n379                                        ethyl linoleate\n380                                      methyl linolenate\n381                                       ethyl linolenate\n382                                       methylsalicylate\n383                                       ethyl salicylate\n384                                               LACTONES\n385                                        7-butyrolactone\n386                                 2-methyl-4-butanolide \n387                              3-methyl-2-buten-4-olide \n388                                          4-pentanolide\n389                                3-methyl-4-pentanolide \n390                                          4-hexanolide \n391                                6-hydroxy-5-hexanolide \n392                                          4-octanolide \n393                                          5-octanolide \n394                                           4-nonanolide\n396                          2,4-dimethyl-2-nonen-4-olide \n397                                  dihydroactinidiolide \n399                                              phtalide \n400                                       SULFUR COMPOUNDS\n401                                       hydrogen sulfide\n402                                       dimethyl sulfide\n403                                   ethylmethyl sulfide \n404                                    dimethyl disulfide \n405                                methylpropyl disulfide \n406                                          methanethiol \n407                                 2-(methylthio)ethanol \n408                                 3(methylthio)-propanol\n409                              5(methylthio)-l-pentanol \n410                            2(methylthio)-acetaldehyde \n411                                3(methylthio)-propanal \n412                           methyl-methanethiosulfonate \n413                                     NITROGEN COMPOUNDS\n414                                            methylamine\n415                                             ethylamine\n416                                          dimethylamine\n417                                        trimethylamine \n418                                            propylamine\n419                                            butylamine \n420                                          isobutylamine\n421                                    dimethylethylamine \n422                                           diethylamine\n423                                    2-methylbutylamine \n424                                           pentylamine \n425                                         isopentylamine\n426                                         diphenylamine \n427                                 3-methylbutanal-oxime \n428                                         butanenitrile \n429                                  3-methylbutanenitrile\n430                                        pentanenitrile \n431                                         benzyl cyanide\n432                                    3-methylnitrobutane\n433                          3-hydroxy-3-methylnitrobutane\n434                                      HALOGEN COMPOUNDS\n435                                       trichloromethane\n436                                     trichloroethylene \n437                                    1,2-dichlorobenzene\n438               OXYGEN-CONTAINING HETEROCYCLIC COMPOUNDS\n439                                                 furan \n440                                          2-methylfuran\n441                                          2-ethylfuran \n442                                         2-propylfuran \n443                                      2-isobutenylfuran\n444                             2-isopropyl-5-methylfuran \n445                            2-isopropenyl-5-methylfuran\n446                              2-methyl-5-propenylfuran \n447                                         2-pentylfuran \n448                                          2-hexylfuran \n449                                         2-heptylfuran \n450                                            acetylfuran\n451                                         2-acetylfuran \n452                                              furfural \n454                                       5-methylfurfural\n455                                 2-acetyl-5-methylfuran\n456                              2-acetonyl-5-methylfuran \n457                             methyl-2-furancarboxylate \n458                                          dibenzofuran \n459                                      furfuryl alcohol \n460                                2-furancarboxylic acid \n461                          2-methyltetrahydro-3-furanone\n462                               linalool oxide I. or II.\n463                                     linalool oxide I. \n465                                    linalool oxide II. \n467                                   linalool III. or IV.\n468                                            structure) \n469                                           1,4-dioxane \n470                          2,2,4-trimethyl-l3-dioxolane \n471               2,7-dioxa-l,3,3-trimethylbicycloheptane \n472                   ó.S-dioxa-l.S-dimethylbicyclooctane \n473               SULFUR-CONTAINING HETEROCYCLIC COMPOUNDS\n474                                     2-forraylthiophene\n475                                     3-formylthiophene \n476                            2-formyl-5-methylthiophene \n477                                     2-acetylthiophene \n478                            2-thiophenecarboxyIic acid \n479             NITROGEN-CONTAINING HETEROCYCLIC COMPOUNDS\n480                                               pyrrole \n481                                   2,5-dimethylpyrrole \n483                                        2-formylpyrrole\n484                                       2-acetylpyrrole \n485                                              pyridine \n486                                      2-formylpyridine \n487                                         methylpyrazine\n488                                      2-methylpyrazine \n489                                  2,6-dimethylpyrazine \n490                               2-ethyl-6-vinylpyrazine \n491                          2-isopropyl-3-methoxypyrazine\n492                                                indene \n493 SULFUR- AND NITROGEN-CONTAINING HETEROCYCLIC COMPOUNDS\n494                                      2-propylthiazole \n495                                    2-isobutylthiazole \n497                                   2-sec-butylthiazole \n498                          2-isopropyl-4-methylthiazole \n499                                          benzothiazole\n500               NITROGEN-AND OXYGEN-CONTAINING COMPOUNDS\n501                                        4-butyloxazole \n502                               5-pentyl-4-ethyloxazole \n503                                 4,5-dimethylisoxazole \n\ntomato_cleaned$compounds <- str_remove_all(tomato_cleaned$compounds, \n                                           \"\\\\s\")\n\n\n\nThe file could be exported as a .csv file as a back up, in case it is needed again in the future.\nTRANSFORM\nNext, I had to split the compounds into various chemical categories.\n\n\nhydrocarbons <- tomato_cleaned %>% \n  as_tibble() %>% \n  slice(2:39) %>% \n  mutate(category = \"hydrocarbons\")\n\n\nalcohols <- tomato_cleaned %>% \n  as_tibble() %>% \n  slice(41:98) %>% \n  mutate(category = \"alcohols\")\n\nphenols <- tomato_cleaned %>% \n  as_tibble() %>% \n  slice(99:108) %>% \n  mutate(category = \"phenols\")\n\nethers<- tomato_cleaned %>% \n  as_tibble() %>% \n  slice(111:116) %>% \n  mutate(category = \"ethers\")\n\naldehydes<- tomato_cleaned %>% \n  as_tibble() %>% \n  slice(118:176) %>% \n  mutate(category = \"aldehydes\")\n\nketones<- tomato_cleaned %>% \n  as_tibble() %>% \n  slice(178:219) %>% \n  mutate(category = \"ketones\")\n\ndicarbonyl<- tomato_cleaned %>% \n  as_tibble() %>% \n  slice(221:226) %>% \n  mutate(category = \"dicarbonyl\")\n\nacids<- tomato_cleaned %>% \n  as_tibble() %>% \n  slice(228:254) %>% \n  mutate(category = \"acids\")\n\nesters<- tomato_cleaned %>% \n  as_tibble() %>% \n  slice(256:314) %>% \n  mutate(category = \"esters\")\n\nlactones<- tomato_cleaned %>% \n  as_tibble() %>% \n  slice(316:328) %>% \n  mutate(category = \"lactones\")\n\nsulfur<- tomato_cleaned %>% \n  as_tibble() %>% \n  slice(330:341) %>% \n  mutate(category = \"sulfur\")\n\nnitrogen<- tomato_cleaned %>% \n  as_tibble() %>% \n  slice(343:362) %>% \n  mutate(category = \"nitrogen\")\n\nhalogen<- tomato_cleaned %>% \n  as_tibble() %>% \n  slice(364:366) %>% \n  mutate(category = \"halogen\")\n\noxygen<- tomato_cleaned %>% \n  as_tibble() %>% \n  slice(368:398) %>% \n  mutate(category = \"oxygen\")\n\nsulfur_heterocyclic<- tomato_cleaned %>% \n  as_tibble() %>% \n  slice(400:404) %>% \n  mutate(category = \"sulfur_heterocyclic\")\n\nnitrogen_heterocyclic<- tomato_cleaned %>% \n  as_tibble() %>% \n  slice(406:417) %>% \n  mutate(category = \"nitrogen_heterocyclic\")\n\nnitrogen_sulfur_heterocyclic<- tomato_cleaned %>% \n  as_tibble() %>% \n  slice(419:423) %>% \n  mutate(category = \"nitrogen_sulfur_heterocyclic\")\n\nnitrogen_oxygen_heterocyclic<- tomato_cleaned %>% \n  as_tibble() %>% \n  slice(425:427) %>% \n  mutate(category = \"nitrogen_oxygen_heterocyclic\")\n\n\n\nVisualize\n\n\ntomatoes_compounds <- bind_rows(hydrocarbons,\n                                alcohols,\n                                phenols,\n                                ethers,\n                                aldehydes,\n                                ketones,\n                                dicarbonyl,\n                                acids,\n                                esters,\n                                lactones,\n                                sulfur,\n                                halogen,\n                                oxygen,\n                                sulfur_heterocyclic,\n                                nitrogen_heterocyclic,\n                                nitrogen_sulfur_heterocyclic,\n                                nitrogen_oxygen_heterocyclic\n                                )\n\nplot <- tomatoes_compounds %>% \n  group_by(category) %>% \n  summarise(count = n()) %>% \n  ggplot(aes(x = reorder(category, count), y = count, label = count)) +\n  geom_col(fill = \"tomato2\") +\n  geom_text(aes(label = count), hjust = -0.5, size = 5) +\n  scale_y_continuous(expand = c(0,0), limits = c(0, 80)) +\n  labs(y = \"No. of compounds\",\n       x = \"Category\",\n       title = \"Number of volatile compounds identified in tomatoes, sorted by chemical category\",\n       subtitle = \"Esters, aldehydes and alcohols dominate the types of compounds identified\",\n       caption = \"Petro-Turza(1989): Flavor of tomato and tomato products \") +\n  coord_flip() +\n  theme_classic() +\n   theme(title = element_text(size = 28),\n        axis.title = element_text(size = 24, face = \"bold\"),\n        axis.text = element_text(size = 20))\n\nplot\n\n\n\n\nReflections\nIt may have been easier to type out the list of 400 compounds, which would only take an hour or less, with the formatting done properly on the onset. However, if the table was much longer, text cleaning would be more effectively carried out by stringr. Some improvements could be made to the script so that I do not have to carry out multiple str_replace_all, and to automatically filter out by categories instead of manually defining them. However, it was a good beginner’s practice on text cleaning using the stringr package as I do not often have the chance to use regular expressions, and I found the str_detect, str_which and str_view_all functions extremely useful in locating regex matches.\nThe plot above only lists the number of compounds identified so far by chemical classes, but does not show which are the character impact compounds that contribute significantly to tomatoes.\nHistorically, researchers focused on identifying volatiles, quantifying them and classifying them based on their odor thresholds to determine which compounds played a contributory role to tomato flavor. However, the new trend is in assessing the importance of compounds based on how much they contribute to the liking of tomato flavor, and this could be by means of targeted metabolomics, or by generating prediction models for different descriptors of tomato flavor using regression analysis of both volatile and non-volatile compounds, or by carrying out multivariate modelling on physicochemical, volatile and sensory parameters(Rambla et al. 2013).\nIt would be interesting to try to apply prediction models and multivariate analysis in R.\nReferences\nhttps://www.r-bloggers.com/2019/09/pdf-scraping-in-r-with-tabulizer/\n\n\n\nBaldwin, E. A., J. W. Scott, M. A. Einstein, T. M. M. Malundo, B. T. Carr, R. L. Shewfelt, and K. S. Tandon. 1998. “Relationship Between Sensory and Instrumental Analysis for Tomato Flavor.” Journal of the American Society for Horticultural Science 123 (5): 906–15.\n\n\nButtery, Ron G., Roy Teranishi, and Louisa C. Ling. 1987. “Fresh Tomato Aroma Volatiles: A Quantitative Study.” Journal of Agricultural and Food Chemistry 35 (4): 540–44.\n\n\nPetro‐Turza, Martha. 1986. “Flavor of Tomato and Tomato Products.” Food Reviews International 2 (3): 309–51. https://doi.org/10.1080/87559128609540802.\n\n\nRambla, José L., Yury M. Tikunov, Antonio J. Monforte, Arnaud G. Bovy, and Antonio Granell. 2013. “The Expanded Tomato Fruit Volatile Landscape.” Journal of Experimental Botany 65 (16): 4613–23.\n\n\nYilmaz, Emin. 2001. “The Chemistry of Fresh Tomato Flavor.” Turkish Journal of Agriculture and Forestry 25 (3): 149–55.\n\n\n\n\n",
    "preview": "posts/20210130_Volatiles_tomato/Volatiles_tomatoes_files/figure-html5/unnamed-chunk-6-1.png",
    "last_modified": "2021-02-01T23:36:52+08:00",
    "input_file": {}
  },
  {
    "path": "posts/20210123_PCA wine/",
    "title": "PCA Wine",
    "description": "PCA (using tidymodels) with wine dataset",
    "author": [
      {
        "name": "lruolin",
        "url": {}
      }
    ],
    "date": "2021-01-23",
    "categories": [],
    "contents": "\nSummary\nPCA is a data reduction technique, to uncover latent variables that are uncorrelated. It is an unsupervised way of classification. Not all of the variables in high-dimensional data are required. Some are highly correlated with others and these variables may be omitted, while retaining a similar level of information in the dataset in terms of explaining the variance.\nIt is used as an exploratory data analysis tool, and may be used for feature engineering and/or clustering.\nWorkflow\nImport data\nExploratory data analysis\nskim\nggcorr\nggpairs\nCheck assumptions on whether PCA can be carried out\nKMO\nBartlett\nCarry out PCA using tidymodels workflow\nAlways use only continuous variables, ensure that there are no missing data. Determine the number of components using eigenvalues, scree plots and parallel analysis.\nrecipe : preprocess the data (missing values, center and scale, ensuring that variables are continuous)\nprep : evaluate the data\nbake : get the PCA Scores results\nvisualize\ncommunicate results: show the scree plot, PCA loadings, variance explained by each component, loadings and score plot.\nThe scores plot show the positions of the individual wine samples in the coordinate system of the PCs.\nThe loadings plot shows the contribution of the X variables to the PCs.\nLoading packages\n\n\nlibrary(pacman)\np_load(corrr, palmerpenguins, GGally, tidymodels, tidytext, tidyverse, psych,\n       skimr, gridExtra, kohonen, janitor, learntidymodels, kohonen)\n\n\n\nImport\nThis dataset is from the kohonen package. It contains 177 rows and 13 columns.\nThese data are the results of chemical analyses of wines grown in the same region in Italy (Piedmont) but derived from three different cultivars: Nebbiolo, Barberas and Grignolino grapes. The wine from the Nebbiolo grape is called Barolo. The data contain the quantities of several constituents found in each of the three types of wines, as well as some spectroscopic variables.\nThe dataset requires some cleaning, and the type of wine was added to the datset.\n\n\ndata(wines)\n\nwines <- as.data.frame(wines) %>% \n  janitor::clean_names() %>%  # require data.frame\n  as_tibble() %>% \n  cbind(vintages)  # vintages = Y outcome = category\n \nglimpse(wines)\n\n\nRows: 177\nColumns: 14\n$ alcohol          <dbl> 13.20, 13.16, 14.37, 13.24, 14.20, 14.39, …\n$ malic_acid       <dbl> 1.78, 2.36, 1.95, 2.59, 1.76, 1.87, 2.15, …\n$ ash              <dbl> 2.14, 2.67, 2.50, 2.87, 2.45, 2.45, 2.61, …\n$ ash_alkalinity   <dbl> 11.2, 18.6, 16.8, 21.0, 15.2, 14.6, 17.6, …\n$ magnesium        <dbl> 100, 101, 113, 118, 112, 96, 121, 97, 98, …\n$ tot_phenols      <dbl> 2.65, 2.80, 3.85, 2.80, 3.27, 2.50, 2.60, …\n$ flavonoids       <dbl> 2.76, 3.24, 3.49, 2.69, 3.39, 2.52, 2.51, …\n$ non_flav_phenols <dbl> 0.26, 0.30, 0.24, 0.39, 0.34, 0.30, 0.31, …\n$ proanth          <dbl> 1.28, 2.81, 2.18, 1.82, 1.97, 1.98, 1.25, …\n$ col_int          <dbl> 4.38, 5.68, 7.80, 4.32, 6.75, 5.25, 5.05, …\n$ col_hue          <dbl> 1.05, 1.03, 0.86, 1.04, 1.05, 1.02, 1.06, …\n$ od_ratio         <dbl> 3.40, 3.17, 3.45, 2.93, 2.85, 3.58, 3.58, …\n$ proline          <dbl> 1050, 1185, 1480, 735, 1450, 1290, 1295, 1…\n$ vintages         <fct> Barolo, Barolo, Barolo, Barolo, Barolo, Ba…\n\nEDA\nSome exploratory data analysis was carried out:\nWhat are the types of variables? Categorical or numerical?\nWhat is the distribution like? Skewed?\nAre there any missing values?\nAre there any outliers?\nCheck the types of wine\nAre the variables quite correlated with each other?\nskimr\n\n\nskim(wines) # 177 x 13, all numeric + Y outcome\n\n\nTable 1: Data summary\nName\nwines\nNumber of rows\n177\nNumber of columns\n14\n_______________________\n\nColumn type frequency:\n\nfactor\n1\nnumeric\n13\n________________________\n\nGroup variables\nNone\nVariable type: factor\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\nvintages\n0\n1\nFALSE\n3\nGri: 71, Bar: 58, Bar: 48\nVariable type: numeric\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\nalcohol\n0\n1\n12.99\n0.81\n11.03\n12.36\n13.05\n13.67\n14.83\n▂▇▇▇▃\nmalic_acid\n0\n1\n2.34\n1.12\n0.74\n1.60\n1.87\n3.10\n5.80\n▇▅▂▂▁\nash\n0\n1\n2.37\n0.28\n1.36\n2.21\n2.36\n2.56\n3.23\n▁▂▇▅▁\nash_alkalinity\n0\n1\n19.52\n3.34\n10.60\n17.20\n19.50\n21.50\n30.00\n▁▆▇▃▁\nmagnesium\n0\n1\n99.59\n14.17\n70.00\n88.00\n98.00\n107.00\n162.00\n▅▇▃▁▁\ntot_phenols\n0\n1\n2.29\n0.63\n0.98\n1.74\n2.35\n2.80\n3.88\n▅▇▇▇▁\nflavonoids\n0\n1\n2.02\n1.00\n0.34\n1.20\n2.13\n2.86\n5.08\n▆▆▇▂▁\nnon_flav_phenols\n0\n1\n0.36\n0.12\n0.13\n0.27\n0.34\n0.44\n0.66\n▃▇▅▃▂\nproanth\n0\n1\n1.59\n0.57\n0.41\n1.25\n1.55\n1.95\n3.58\n▃▇▆▂▁\ncol_int\n0\n1\n5.05\n2.32\n1.28\n3.21\n4.68\n6.20\n13.00\n▇▇▃▂▁\ncol_hue\n0\n1\n0.96\n0.23\n0.48\n0.78\n0.96\n1.12\n1.71\n▅▇▇▃▁\nod_ratio\n0\n1\n2.60\n0.71\n1.27\n1.93\n2.78\n3.17\n4.00\n▆▃▆▇▂\nproline\n0\n1\n745.10\n314.88\n278.00\n500.00\n672.00\n985.00\n1680.00\n▇▇▅▃▁\n\nGGally\n\n\nwines %>% \n  select(-vintages) %>% \n  ggcorr(label = T, label_alpha = T, label_round = 2)\n\n\n\nwines %>% \n  ggpairs(aes(col = vintages))\n\n\n\n\nChecking assumptions\nIs the dataset suitable for PCA analysis?\n\n\n# Continuous Y\n# No missing data\n# Check assumptions for PCA #####\nwines_no_y <- wines %>% \n  select(-vintages)\n\nglimpse(wines_no_y)\n\n\nRows: 177\nColumns: 13\n$ alcohol          <dbl> 13.20, 13.16, 14.37, 13.24, 14.20, 14.39, …\n$ malic_acid       <dbl> 1.78, 2.36, 1.95, 2.59, 1.76, 1.87, 2.15, …\n$ ash              <dbl> 2.14, 2.67, 2.50, 2.87, 2.45, 2.45, 2.61, …\n$ ash_alkalinity   <dbl> 11.2, 18.6, 16.8, 21.0, 15.2, 14.6, 17.6, …\n$ magnesium        <dbl> 100, 101, 113, 118, 112, 96, 121, 97, 98, …\n$ tot_phenols      <dbl> 2.65, 2.80, 3.85, 2.80, 3.27, 2.50, 2.60, …\n$ flavonoids       <dbl> 2.76, 3.24, 3.49, 2.69, 3.39, 2.52, 2.51, …\n$ non_flav_phenols <dbl> 0.26, 0.30, 0.24, 0.39, 0.34, 0.30, 0.31, …\n$ proanth          <dbl> 1.28, 2.81, 2.18, 1.82, 1.97, 1.98, 1.25, …\n$ col_int          <dbl> 4.38, 5.68, 7.80, 4.32, 6.75, 5.25, 5.05, …\n$ col_hue          <dbl> 1.05, 1.03, 0.86, 1.04, 1.05, 1.02, 1.06, …\n$ od_ratio         <dbl> 3.40, 3.17, 3.45, 2.93, 2.85, 3.58, 3.58, …\n$ proline          <dbl> 1050, 1185, 1480, 735, 1450, 1290, 1295, 1…\n\n# KMO: Indicates the proportion of variance in the variables that may be caused by underlying factors. High values (close to 1) indicate that factor analysis may be useful.\nwines_no_y %>% \n  cor() %>% \n  KMO() # .70 above : YES\n\n\nKaiser-Meyer-Olkin factor adequacy\nCall: KMO(r = .)\nOverall MSA =  0.78\nMSA for each item = \n         alcohol       malic_acid              ash   ash_alkalinity \n            0.73             0.80             0.44             0.68 \n       magnesium      tot_phenols       flavonoids non_flav_phenols \n            0.67             0.87             0.81             0.82 \n         proanth          col_int          col_hue         od_ratio \n            0.85             0.62             0.79             0.86 \n         proline \n            0.81 \n\n# Bartlett's test of sphericity: tests the hypothesis that the correlation matrix is an identity matrix (ie variables are unrelated and not suitable for structure detection.) For factor analysis, the p. value should be <0.05.\n\nwines_no_y %>% \n  cor() %>% \n  cortest.bartlett(., n = 177) # p<0.05\n\n\n$chisq\n[1] 1306.787\n\n$p.value\n[1] 3.302319e-222\n\n$df\n[1] 78\n\nTidymodels (PCA)\nRecipe\nWith the use of update_role(), the types of wine information is retained in the dataset.\nstep_normalize() combines step_center() and step_scale()\nNote that step_pca is the second step –> will need to retrieve the PCA results from the second list later.\n\n\nwines_recipe <- recipe(~ ., data = wines) %>% \n  update_role(vintages, new_role = \"id\") %>%  \n  # step_naomit(all_predictors()) %>% \n  step_normalize(all_predictors()) %>% \n  step_pca(all_predictors(), id = \"pca\")\n\nwines_recipe # 13 predictors\n\n\nData Recipe\n\nInputs:\n\n      role #variables\n        id          1\n predictor         13\n\nOperations:\n\nCentering and scaling for all_predictors()\nNo PCA components were extracted.\n\nPreparation\n\n\nwines_prep <- prep(wines_recipe)\n\nwines_prep # trained\n\n\nData Recipe\n\nInputs:\n\n      role #variables\n        id          1\n predictor         13\n\nTraining data contained 177 data points and no missing data.\n\nOperations:\n\nCentering and scaling for alcohol, malic_acid, ... [trained]\nPCA extraction with alcohol, malic_acid, ... [trained]\n\ntidy_pca_loadings <- wines_prep %>% \n  tidy(id = \"pca\")\n\ntidy_pca_loadings # values here are the loading\n\n\n# A tibble: 169 x 4\n   terms               value component id   \n   <chr>               <dbl> <chr>     <chr>\n 1 alcohol          -0.138   PC1       pca  \n 2 malic_acid        0.246   PC1       pca  \n 3 ash               0.00432 PC1       pca  \n 4 ash_alkalinity    0.237   PC1       pca  \n 5 magnesium        -0.135   PC1       pca  \n 6 tot_phenols      -0.396   PC1       pca  \n 7 flavonoids       -0.424   PC1       pca  \n 8 non_flav_phenols  0.299   PC1       pca  \n 9 proanth          -0.313   PC1       pca  \n10 col_int           0.0933  PC1       pca  \n# … with 159 more rows\n\nBake\n\n\nwines_bake <- bake(wines_prep, wines)\nwines_bake  # has the PCA SCORES that we are familiar with\n\n\n# A tibble: 177 x 6\n   vintages   PC1    PC2    PC3      PC4     PC5\n   <fct>    <dbl>  <dbl>  <dbl>    <dbl>   <dbl>\n 1 Barolo   -2.22 -0.301 -2.03   0.281   -0.259 \n 2 Barolo   -2.52  1.06   0.974 -0.734   -0.198 \n 3 Barolo   -3.74  2.80  -0.180 -0.575   -0.257 \n 4 Barolo   -1.02  0.886  2.02   0.432    0.274 \n 5 Barolo   -3.04  2.16  -0.637  0.486   -0.630 \n 6 Barolo   -2.45  1.20  -0.985  0.00466 -1.03  \n 7 Barolo   -2.06  1.64   0.143  1.20     0.0105\n 8 Barolo   -2.51  0.958 -1.78  -0.104   -0.871 \n 9 Barolo   -2.76  0.822 -0.986 -0.374   -0.437 \n10 Barolo   -3.48  1.35  -0.428 -0.0399  -0.316 \n# … with 167 more rows\n\nCheck number of PC\n\n\n# a. Eigenvalues: Keep components greater than 1\n# data is stored in penguins_prep, step 3\n\nwines_prep$steps[[2]]$res$sdev # 3\n\n\n [1] 2.1628220 1.5815708 1.2055413 0.9614802 0.9282978 0.8030241\n [7] 0.7429548 0.5922321 0.5377546 0.4967984 0.4748054 0.4103374\n[13] 0.3224124\n\n# b. Scree plot/Variance plot\n\nwines_prep %>% \n  tidy(id = \"pca\", type = \"variance\") %>% \n  filter(terms ==  \"percent variance\") %>% \n  ggplot(aes(x = component, y = value)) +\n  geom_point(size = 2) +\n  geom_line(size = 1) +\n  scale_x_continuous(breaks = 1:4) +\n  labs(title = \"% Variance explained\",\n       y = \"% total variance\",\n       x = \"PC\",\n       caption = \"Source: ChemometricswithR book\") +\n  theme_minimal() +\n  theme(axis.title = element_text(face = \"bold\", size = 12),\n        axis.text = element_text(size = 10),\n        plot.title = element_text(size = 14, face = \"bold\"))  # 2 or 3\n\n\n\n# bii: Cumulative variance plot\n\nwines_prep %>% \n  tidy(id = \"pca\", type = \"variance\") %>% \n  filter(terms == \"cumulative percent variance\") %>%\n  ggplot(aes(component, value)) +\n  geom_col(fill= \"forestgreen\") +\n  labs(x = \"Principal Components\", \n       y = \"Cumulative variance explained (%)\",\n       title = \"Cumulative Variance explained\") +\n  geom_text(aes(label = round(value, 2)), vjust = -0.2, size = 4) +\n  theme_minimal() +\n  theme(axis.title = element_text(face = \"bold\", size = 12),\n        axis.text = element_text(size = 10),\n        plot.title = element_text(size = 14, face = \"bold\")) \n\n\n\n# c. Parallel analysis\n\nfa.parallel(cor(wines_no_y),\n            n.obs = 333,\n            cor = \"cor\",\n            plot = T)  # 3\n\n\n\nParallel analysis suggests that the number of factors =  4  and the number of components =  3 \n\nVisualize\nLoadings plot\n\n\nplot_loadings <- tidy_pca_loadings %>% \n  filter(component %in% c(\"PC1\", \"PC2\", \"PC3\", \"PC4\")) %>% \n  mutate(terms = tidytext::reorder_within(terms, \n                                          abs(value), \n                                          component)) %>% \n  ggplot(aes(abs(value), terms, fill = value>0)) +\n  geom_col() +\n  facet_wrap( ~component, scales = \"free_y\") +\n  scale_y_reordered() + # appends ___ and then the facet at the end of each string\n  scale_fill_manual(values = c(\"deepskyblue4\", \"darkorange\")) +\n  labs( x = \"absolute value of contribution\",\n        y = NULL,\n        fill = \"Positive?\",\n        title = \"PCA Loadings Plot\",\n        subtitle = \"Number of PC should be 3, compare the pos and the neg\",\n        caption = \"Source: ChemometricswithR\") +\n  theme_minimal()\n\n\nplot_loadings\n\n\n\n# PC1: flavonoids, tot_phenols, od_ratio, proanthocyanidins, col_hue, 36%\n# PC2: col_int, alcohol, proline, ash, magnesium; 19.2%\n# PC3: ash, ash_alkalinity, non_flav phenols; 11.2%\n# PC4: malic acid?\n\n\n\nAn alternative way to plot:\n\n\n# alternate plot loadings\n\nlearntidymodels::plot_top_loadings(wines_prep,\n                  component_number <= 4, n = 5) +\n  scale_fill_manual(values = c(\"deepskyblue4\", \"darkorange\")) +\n  theme_minimal()\n\n\n\n\nLoadings only\n\n\n# define arrow style\narrow_style <- arrow(angle = 30,\n                     length = unit(0.2, \"inches\"),\n                     type = \"closed\")\n\n# get pca loadings into wider format\npca_loadings_wider <- tidy_pca_loadings%>% \n  pivot_wider(names_from = component, id_cols = terms)\n\n\npca_loadings_only <- pca_loadings_wider %>% \n  ggplot(aes(x = PC1, y = PC2)) +\n  geom_segment(aes(xend = PC1, yend = PC2),\n               x = 0, \n               y = 0,\n               arrow = arrow_style) +\n  ggrepel::geom_text_repel(aes(x = PC1, y = PC2, label = terms),\n            hjust = 0, \n            vjust = 1,\n            size = 5,\n            color = \"red\") +\n  labs(title = \"Loadings on PCs 1 and 2 for normalized data\") +\n  theme_classic()\n\n\n\nScores plot\n\n\n# Scores plot #####\n# PCA SCORES are in bake\npc1pc2_scores_plot <- wines_bake %>% \n  ggplot(aes(PC1, PC2)) +\n  geom_point(aes(color = vintages, shape = vintages), \n             alpha = 0.8, size = 2) +\n  scale_color_manual(values = c(\"deepskyblue4\", \"darkorange\", \"purple\")) +\n  labs(title = \"Scores on PCs 1 and 2 for normalized data\",\n       x = \"PC1 (36%)\",\n       y = \"PC2 (19.2%)\") +\n  theme_classic() +\n  theme(legend.position = \"none\") \n\n\n\nFinalised plots\n\n\ngrid.arrange(pc1pc2_scores_plot, pca_loadings_only, ncol = 2)\n\n\n\n\nCheck against Data\n\n\nwines %>% \n  group_by(vintages) %>% \n  summarise(across(c(flavonoids, col_int, ash, malic_acid),\n                   mean,\n                   na.rm = T))\n\n\n# A tibble: 3 x 5\n  vintages   flavonoids col_int   ash malic_acid\n* <fct>           <dbl>   <dbl> <dbl>      <dbl>\n1 Barbera         0.781    7.40  2.44       3.33\n2 Barolo          2.98     5.53  2.46       2.02\n3 Grignolino      2.08     3.09  2.24       1.93\n\nInterpretation of results\nPCA allows for exploratory characterizing of x variables that are associated with each other.\nPC1: flavanoids, total phenols, OD_ratio. PC2: color intensity, alcohol, proline PC3: ash, ash_alkalinity PC4: malic acid (by right 3 components are sufficient)\nBarbera, indicated in blue, has the largest score on PC 1 and PC2. Barolo, indicated in orange, has the smallest score on PC 1. Grignolo, indicated in purple, has the lowest score on PC 2.\nBarbera has low flavonoids, high col_int and high malic acid Barolo has high flavonoids, medium col_int and intermediate malic acid Grignolino has intermediate flavonoids, high col_int and low malic acid.\nReferences\nhttps://rdrr.io/github/tidymodels/learntidymodels/f/inst/tutorials/pca_recipes/pca_recipes.Rmd\nhttps://allisonhorst.github.io/palmerpenguins/articles/articles/pca.html\nhttps://www.ibm.com/support/knowledgecenter/en/SSLVMB_subs/statistics_casestudies_project_ddita/spss/tutorials/fac_telco_kmo_01.html\n\n\n\n",
    "preview": "posts/20210123_PCA wine/PCA-wine_files/figure-html5/unnamed-chunk-4-1.png",
    "last_modified": "2021-01-23T15:55:43+08:00",
    "input_file": {}
  },
  {
    "path": "posts/20210120_statistical concepts/",
    "title": "Statistical Concepts",
    "description": "Definition of terms",
    "author": [
      {
        "name": "lruolin",
        "url": {}
      }
    ],
    "date": "2021-01-20",
    "categories": [],
    "contents": "\nThis is a glossary of terms, in alphabetical order.\nCorrelation, r : whether there is any relationship between two variables. If so, whether the relationship is weak or strong, and what the direction of relationship is.\nPrincipal Component Analysis (PCA): a multivariate technique used to reduce the number of dimensions to explain the total variation in the data with a few linear combinations of original variables, which are uncorrelated.\nVariance, Sˆ2: the average of squared deviations of the values from mean. Square root of variance = standard deviation.\n\n\n\n",
    "preview": {},
    "last_modified": "2021-01-21T00:34:33+08:00",
    "input_file": {}
  },
  {
    "path": "posts/20210115_kovats/",
    "title": "Kovats Index",
    "description": "R script for calculating Kovats Index",
    "author": [
      {
        "name": "lruolin",
        "url": {}
      }
    ],
    "date": "2021-01-15",
    "categories": [],
    "contents": "\n\nContents\nBackground\nR workflow\nExampleLoad packages\nImport\nTransform\n\nReferences:\n\nBackground\nAbout 70% of my time at work is spent on interpreting GCMS and GC data. It is more of a qualitative type of identifying what each peak is, and this requires a seach based on mass spectra found in the GCMS library, as well as using the retention index. When working on GC data, I am even more reliant on the retention index for cross checking of peaks on GCMS, since there is no spectra information available.\nRetention time is influenced by GC conditions and column types. Using retention time alone is not useful when you are trying to compare with retention times stated in the literature, since the elution conditions are different.\nThe Kovats index (KI) may be used to convert retention times into standardised retention indices (RI), based on retention times of alkane standards. The equation for Non-Isothermal Kovats RI is shown below.\n\\[\nI_x = 100n + 100(t_x-t_n) / (t_(n+1) − t_n)\n\\]\nPrior to learning R, I used to do the calculation on an excel spreadsheet. This was cumbersome, first I had to key in the retention times of each alkane standard, and then update my formula for the range of retention times between each alkane standard, and then copy and paste all the compiled retention times into 2 columns. That involved a lot of clicking with the mouse.\nR workflow\nRun alkane standards on instrument (for example, GCMS) and compile the retention times in either .csv or .xlsx.\nCreate a function to calculate KI.\nCalculate the KI for retention times between each pair of alkane standard\nMerge the compiled retention times and corresponding KI together\nExport the data to excel and use the vlookup function to find out the KI when retention time is keyed in; alternatively, use inner_join function to tabulate calculated KI before identifying the peaks. I am using the former as there may be some small peaks that were not integrated, or coeluted with other peaks, so there is still a degree of manual input that is required.\nExample\nSample retention time data was retrieved from: https://massfinder.com/wiki/Retention_index_guide\nLoad packages\n\n\nlibrary(tidyverse)\n\n\n\nImport\n\n\n# Key in values\ncarbon_number <- c(\"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\")\nMS_RT <- c(1.85, 2.71, 3.69, 4.59, 5.37, 6.19, 7.17, 8.40, 9.99)\n\n# Create a tibble\nms_rt <- cbind(carbon_number, MS_RT) %>% as_tibble()\nms_rt$carbon_number <- as.numeric(ms_rt$carbon_number)\nms_rt$MS_RT <- as.numeric(ms_rt$MS_RT)\n\n# The data may also be imported from excel\n\n\n\nTransform\n\n\n# create function to calculate KI ####\nto_Calc_KI = function(n,Tn,m,Tm,Ti){\n  RI = 100*n + (100*(m-n)*((Ti-Tn)/(Tm-Tn)))\n  round(RI, 0)\n  \n}\n\n\n\n\n\n# create function to filter by carbon number ####\n# dat refers to data\n# col refers to column\n# val refers to values\n\nfilter_by_carbon_number <- function(dat, col, val){\n  filter(dat, col %in%  val)\n}\n\n\n\nThe following step could be improved on by creating another function to repeat the codes rather than manually changing the values.\n\n\nfil_c8c9 <- filter_by_carbon_number(ms_rt, ms_rt$carbon_number, c(8,9)) \n\nfil_c9c10 <- filter_by_carbon_number(ms_rt, ms_rt$carbon_number, c(9,10)) \n\nfil_c10c11 <- filter_by_carbon_number(ms_rt, ms_rt$carbon_number, c(10,11)) \nfil_c11c12 <- filter_by_carbon_number(ms_rt, ms_rt$carbon_number, c(11,12)) \nfil_c12c13 <- filter_by_carbon_number(ms_rt, ms_rt$carbon_number, c(12,13)) \nfil_c13c14 <- filter_by_carbon_number(ms_rt, ms_rt$carbon_number, c(13,14)) \nfil_c14c15 <- filter_by_carbon_number(ms_rt, ms_rt$carbon_number, c(14,15)) \nfil_c15c16 <- filter_by_carbon_number(ms_rt, ms_rt$carbon_number, c(15,16)) \n\n\n\n\n\n# create function to generate tibble for KI calculation\ncreate_KI_tibble <- function(msrt_col, n , m){\n  seq(from = min(msrt_col), to = max(msrt_col), by = 0.01) %>% \n    as_tibble() %>% \n    rename(\"Ti\" = value) %>% \n    mutate(n = n,\n           m = m,\n           Tn = min(msrt_col), \n           Tm = max(msrt_col)) %>% \n    dplyr::select(n, Tn, m, Tm, Ti) %>% \n    mutate(KI = pmap_dbl(., to_Calc_KI))\n}\n\n\n\n\n\nc8c9 <- create_KI_tibble(fil_c8c9$MS_RT, 8, 9)\nc9c10 <- create_KI_tibble(fil_c9c10$MS_RT, 9, 10)\nc10c11 <- create_KI_tibble(fil_c10c11$MS_RT, 10, 11)\nc11c12 <- create_KI_tibble(fil_c11c12$MS_RT, 11, 12)\nc12c13 <- create_KI_tibble(fil_c12c13$MS_RT, 12, 13)\nc13c14 <- create_KI_tibble(fil_c13c14$MS_RT, 13, 14)\nc14c15 <- create_KI_tibble(fil_c14c15$MS_RT, 14, 15)\nc15c16 <- create_KI_tibble(fil_c15c16$MS_RT, 15, 16)\n\ncalculated_MS_KI <- rbind(c8c9, c9c10, c10c11, c11c12, c12c13, \n                          c13c14, c14c15, c15c16) %>% \n  select(Ti, KI)\n\n# Export created file if needed\n# write_xlsx(calculated_MS_KI, \"Kovats_Indices.xlsx\")\n\n\n\nLooking at the first 6 lines of tabulated KI:\n\n\nhead(calculated_MS_KI)\n\n\n# A tibble: 6 x 2\n     Ti    KI\n  <dbl> <dbl>\n1  1.85   800\n2  1.86   801\n3  1.87   802\n4  1.88   803\n5  1.89   805\n6  1.9    806\n\nReferences:\nhttps://webbook.nist.gov/chemistry/gc-ri/\n\n\n\n",
    "preview": {},
    "last_modified": "2021-01-15T11:19:30+08:00",
    "input_file": {}
  },
  {
    "path": "posts/20210118_calibration curves/",
    "title": "Calibration Curves Data",
    "description": "R script for calculating Limit of Detection and Limit of Quantification",
    "author": [
      {
        "name": "lruolin",
        "url": {}
      }
    ],
    "date": "2021-01-15",
    "categories": [],
    "contents": "\n\nContents\nLoading required packages\nBackground\nImport Example Dataset\nVisualize\nModel\nErrors in slope and intercept of regression line\nPredict the value of x from y:\n\nNote: the data and theory on calibration curve were with reference from: Statistics and Chemometrics for Analytical Chemistry, James N. Miller and Jane Charlotte Miller, 6th edition, Chapter 5\nLoading required packages\n\n\nlibrary(pacman)\np_load(tidyverse, broom, chemCal)\n\n\n\nBackground\nChemists often work with calibration data using standards of known concentrations and putting them through instrumental analysis. When plotting a calibration curve, it is of interest to calculate the limit of detection (LOD) and limit of quantification (LOQ) of the method.\nImport Example Dataset\nThe fluorescence intensities of standard aqueous fluorescein solutions were analysed with a spectrophotometer, and the fluorescence results are shown below:\n\n# A tibble: 7 x 2\n  conc_pgml  fluo\n      <dbl> <dbl>\n1         0   2.1\n2         2   5  \n3         4   9  \n4         6  12.6\n5         8  17.3\n6        10  21  \n7        12  24.7\n\nVisualize\n\n\n\nModel\nLet’s fit a linear model to get the slope (b) and intercept(a).\n\\[\ny = a + bx\n\\]\n\n\nCall:\nlm(formula = fluo ~ conc_pgml, data = data)\n\nResiduals:\n       1        2        3        4        5        6        7 \n 0.58214 -0.37857 -0.23929 -0.50000  0.33929  0.17857  0.01786 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)    \n(Intercept)   1.5179     0.2949   5.146  0.00363 ** \nconc_pgml     1.9304     0.0409  47.197 8.07e-08 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.4328 on 5 degrees of freedom\nMultiple R-squared:  0.9978,    Adjusted R-squared:  0.9973 \nF-statistic:  2228 on 1 and 5 DF,  p-value: 8.066e-08\n\nFrom above, we can see that slope = 1.9304, and intercept = 1.5179.\nErrors in slope and intercept of regression line\nThe limit of detection is defined as:\n\\[\nLOD = \\gamma_B + 3_{SB}\n\\] where LOD is the analyte concentration wich gives a signal equal to the blank signal plus three standard deviations of the blank.\nA function was created to calculate LOD and LOQ:\n\n\ncalcLOD_y <- function(model) {\n  SSE <- sum(model$residuals**2)\n  n <- length(model$residuals) -2\n  Syx <- sqrt(SSE/n)\n  intercept <- as.numeric(model$coefficients[1])\n  calculated_y <- intercept + 3*Syx\n  names(calculated_y) <- \"calculated_y\"\n  print(calculated_y)\n  \n  chemCal::inverse.predict(model,\n                  newdata = calculated_y,\n                  alpha = 0.05) \n}\n\n\n\n\n\ncalcLOQ_y <- function(model) {\n  SSE <- sum(model$residuals**2)\n  n <- length(model$residuals) -2\n  Syx <- sqrt(SSE/n)\n  intercept <- as.numeric(model$coefficients[1])\n  calculated_y <- intercept + 10*Syx\n  names(calculated_y) <- \"calculated_y\"\n  print(calculated_y)\n  \n  chemCal::inverse.predict(model,\n                  newdata = calculated_y,\n                  alpha = 0.05) \n}\n\n\n\nInserting the linear model from the fluorescence data:\n\n\nLOD_x <- calcLOD_y(fl_mod)\n\n\ncalculated_y \n      2.8164 \n\nLOD_x$Prediction \n\n\n[1] 0.6726958\n\n\n\nLOQ_x <- calcLOQ_y(fl_mod)\n\n\ncalculated_y \n    5.846334 \n\nLOQ_x$Prediction \n\n\n[1] 2.242319\n\nPredict the value of x from y:\nTo predict the concentration of fluorescein that has fluorescence units of 2.9, we use the function inverse.predict():\n\n\nchemCal::inverse.predict(fl_mod, \n                newdata = 2.9,\n                alpha = 0.05)\n\n\n$Prediction\n[1] 0.7160037\n\n$`Standard Error`\n[1] 0.2645698\n\n$Confidence\n[1] 0.6800982\n\n$`Confidence Limits`\n[1] 0.03590545 1.39610195\n\n\n\n\n",
    "preview": "posts/20210118_calibration curves/calibration-curves_files/figure-html5/unnamed-chunk-3-1.png",
    "last_modified": "2021-01-18T23:23:27+08:00",
    "input_file": {}
  },
  {
    "path": "posts/20210114_motivations/",
    "title": "Motivations",
    "description": "why R?",
    "author": [
      {
        "name": "lruolin",
        "url": {}
      }
    ],
    "date": "2021-01-14",
    "categories": [],
    "contents": "\nWhy R?\nI attended a short modular course on R, and was introduced to more effective and efficient ways of structuring data for customised plots that look way better than on Excel and SPSS. At the end of the course, I really wanted to retain what I have learnt, and build on what I have learnt, so that I can be better at R.\nR, to me, is a new form of literacy (like how Microsoft Office was taught in school last time). It is also an effective approach to learn problem solving, as well as a job skill.\nAristotle — ‘The more you know, the more you know you don’t know.’\nand that makes me want to learn even more.\n\n\n\n",
    "preview": {},
    "last_modified": "2021-01-14T20:47:28+08:00",
    "input_file": {}
  },
  {
    "path": "posts/welcome/",
    "title": "My first post: Learning goals for 2021",
    "description": "pRactice corner for coding in R",
    "author": [
      {
        "name": "lruolin",
        "url": {}
      }
    ],
    "date": "2021-01-14",
    "categories": [],
    "contents": "\nHi, this is my practice corner for coding in R. I would want to:\nlearn tidyverse\npractice on data visualization, exploration.\nlearn tidymodels/machine learning\nwork on chemistry related datasets using R\nlearn Design of Experiment\nlearn Chemometrics\nlearn how to analyse sensory data\nbe able to communicate insights from data analysis using the Rmarkdown/distill packages\n\n\n\n",
    "preview": {},
    "last_modified": "2021-01-18T21:54:53+08:00",
    "input_file": {}
  }
]
